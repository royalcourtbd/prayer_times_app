#!/bin/bash

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color
MAGENTA='\033[0;35m'  # Added for spinner
CHECKMARK='\033[32mтЬУ\033[0m'  # Added for success checkmark
CROSS='\033[31mЁРДВ\033[0m'  # Added for failure cross

# Function: show_loading
# Description: Displays a loading spinner with a custom message while a process is running
# Parameters:
#   $1: Description message to display
#   $2: Process ID to monitor
function show_loading() {
  local description=$1
  local process_id=$2
  local spinner_index=0
  local braille_spinner_list='тб┐тгЯтгптг╖тг╛тг╜тг╗тв┐'

  echo -n "$description"

  # Continue spinning while the process is running
  while ps -p "$process_id" >/dev/null; do
    printf "\b${MAGENTA}%s${NC}" "${braille_spinner_list:spinner_index:1}"
    spinner_index=$(( (spinner_index + 1) % ${#braille_spinner_list} ))
    sleep 0.025
  done

  # Display success or failure icon based on the process exit status
  if wait $process_id; then  # Changed: Using wait $process_id instead of [ $? -eq 0 ]
    echo -e "\b${CHECKMARK} "
  else
    echo -e "\b${CROSS} "
  fi
}

# Main script logic
if [ "$1" == "apk" ]; then
  echo -e "${YELLOW}Building APK (Full Process)...${NC}\n"
  
  (flutter clean >/dev/null 2>&1) &
  PID=$!
  show_loading "Cleaning project...                                   " $PID

  (flutter pub get >/dev/null 2>&1) &
  PID=$!
  show_loading "Getting dependencies...                              " $PID

  (dart run build_runner build --delete-conflicting-outputs >/dev/null 2>&1) &
  PID=$!
  show_loading "Generating build files...                            " $PID

  (flutter build apk --release --obfuscate --target-platform android-arm64 --split-debug-info=./ >/dev/null 2>&1) &
  PID=$!
  show_loading "Building APK...                                      " $PID

  echo -e "\n${GREEN}тЬУ APK built successfully!${NC}"
  
  # Open the APK directory
  if [[ "$OSTYPE" == "darwin"* ]]; then
    open build/app/outputs/flutter-apk/
  elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    xdg-open build/app/outputs/flutter-apk/
  elif [[ "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
    start build/app/outputs/flutter-apk/
  else
    echo "Cannot open directory automatically. Please check: build/app/outputs/flutter-apk/"
  fi

elif [ "$1" == "aab" ]; then
  echo -e "${YELLOW}Building AAB...${NC}\n"
  
  (flutter clean >/dev/null 2>&1) &
  PID=$!
  show_loading "Cleaning project...                                   " $PID

  (flutter pub get >/dev/null 2>&1) &
  PID=$!
  show_loading "Getting dependencies...                              " $PID

  (dart run build_runner build --delete-conflicting-outputs >/dev/null 2>&1) &
  PID=$!
  show_loading "Generating build files...                            " $PID

  (flutter build appbundle --release --obfuscate --split-debug-info=./ >/dev/null 2>&1) &
  PID=$!
  show_loading "Building AAB...                                      " $PID
  
  echo -e "\n${GREEN}тЬУ AAB built successfully!${NC}"
  
  # Open the directory containing the AAB
  if [[ "$OSTYPE" == "darwin"* ]]; then
    open build/app/outputs/bundle/release/
  elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    xdg-open build/app/outputs/bundle/release/
  elif [[ "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
    start build/app/outputs/bundle/release/
  else
    echo "Cannot open directory automatically. Please check: build/app/outputs/bundle/release/"
  fi

elif [ "$1" == "lang" ]; then
  # Run flutter gen-l10n to generate localization files
  (flutter gen-l10n >/dev/null 2>&1) &
  PID=$!
  show_loading "Generating localizations                              " $PID
  
  echo -e "\n${CHECKMARK}  Localizations generated successfully."

elif [ "$1" == "db" ]; then
  echo -e "${YELLOW}Executing build_runner...${NC}  \n"
  # Run build_runner to generate Dart code
  (dart run build_runner build --delete-conflicting-outputs >/dev/null 2>&1) &
  PID=$!
  show_loading "Running build_runner     " $PID

elif [ "$1" == "setup" ]; then
  echo -e "${YELLOW}Performing full setup...${NC}  \n"

  (flutter clean >/dev/null 2>&1) &
  PID=$!
  show_loading "Cleaning project...                                  " $PID

  (flutter pub upgrade >/dev/null 2>&1) &
  PID=$!
  show_loading "Upgrading dependencies...                            " $PID

  (dart run build_runner build --delete-conflicting-outputs >/dev/null 2>&1) &
  PID=$!
  show_loading "Running build_runner...                              " $PID

  (flutter gen-l10n >/dev/null 2>&1) &
  PID=$!
  show_loading "Generating localizations...                          " $PID

  (flutter pub upgrade >/dev/null 2>&1) &
  PID=$!
  show_loading "Refreshing dependencies...                           " $PID

  (flutter analyze >/dev/null 2>&1) &
  PID=$!
  show_loading "Analyzing code...                                    " $PID

  (dart format . >/dev/null 2>&1) &
  PID=$!
  show_loading "Formatting code...                                   " $PID

  echo -e "\n ${GREEN}тЬУ  Full setup completed successfully.  ${NC}"

elif [ "$1" == "cache-repair" ]; then
  echo -e "${YELLOW}Repairing pub cache...${NC}\n"
  
  (flutter pub cache repair >/dev/null 2>&1) &
  PID=$!
  show_loading "Repairing pub cache...                               " $PID
  
  echo -e "\n ${GREEN}тЬУ  Pub cache repaired successfully.  ${NC}"

elif [ "$1" == "cleanup" ]; then
  echo -e "${YELLOW}Cleaning up project...${NC}\n"
  
  (flutter clean >/dev/null 2>&1) &
  PID=$!
  show_loading "Cleaning project...                                   " $PID

  (flutter pub get >/dev/null 2>&1) &
  PID=$!
  show_loading "Getting dependencies...                              " $PID
  
  echo -e "\n${GREEN}тЬУ Project cleaned successfully!${NC}"

else
  echo -e "${YELLOW}Usage: $0 [command]${NC}"
  echo -e "\nAvailable commands:"
  echo -e "  apk          Build release APK (Full Process)"
  echo -e "  aab          Build release AAB"
  echo -e "  lang         Generate localization files"
  echo -e "  db           Run build_runner"
  echo -e "  setup        Perform full project setup"
  echo -e "  cache-repair Repair pub cache"
  echo -e "  cleanup      Clean project and get dependencies"
  exit 1
fi


#//comment//
# ржЖржЙржЯржкрзБржЯ рж▓рзБржХрж╛ржирзЛ ржПржмржВ ржжрзЗржЦрж╛рж░ ржЬржирзНржп ржХржорж╛ржирзНржб ржХрзАржнрж╛ржмрзЗ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░ржмрзЗржи
#
# 1. ржЖржЙржЯржкрзБржЯ рж▓рзБржХрж╛ржирзЛрж░ ржЬржирзНржп:
#    - ржкрзНрж░рждрж┐ржЯрж┐ ржХржорж╛ржирзНржбрзЗрж░ рж╢рзЗрж╖рзЗ `>/dev/null 2>&1` ржпрзЛржЧ ржХрж░рждрзЗ рж╣ржмрзЗред
#    - ржПржЯрж┐ ржХрж░рж▓рзЗ ржХржорж╛ржирзНржбрзЗрж░ ржЖржЙржЯржкрзБржЯ ржЯрж╛рж░рзНржорж┐ржирж╛рж▓рзЗ ржжрзЗржЦрж╛ржмрзЗ ржирж╛, рж╢рзБржзрзБ рж▓рзЛржбрж┐ржВ рж╕рзНржкрж┐ржирж╛рж░ ржжрзЗржЦрж╛ржмрзЗред
#    - ржЙржжрж╛рж╣рж░ржг:
#      (flutter clean >/dev/null 2>&1) &
#      PID=$!
#      show_loading "Cleaning project...                                   " $PID
#
# 2. ржЖржЙржЯржкрзБржЯ ржжрзЗржЦрж╛рж░ ржЬржирзНржп:
#    - ржкрзНрж░рждрж┐ржЯрж┐ ржХржорж╛ржирзНржб ржерзЗржХрзЗ `>/dev/null 2>&1` рж╕рж░рж┐ржпрж╝рзЗ ржлрзЗрж▓рждрзЗ рж╣ржмрзЗред
#    - ржПржЯрж┐ ржХрж░рж▓рзЗ ржХржорж╛ржирзНржбрзЗрж░ ржкрзБрж░рзЛ ржЖржЙржЯржкрзБржЯ ржЯрж╛рж░рзНржорж┐ржирж╛рж▓рзЗ ржжрзЗржЦрж╛ржмрзЗ, ржпрзЗржоржи ржХрзА рж╣ржЪрзНржЫрзЗ, ржХрзЛржи ржлрж╛ржЗрж▓ рждрзИрж░рж┐ рж╣ржЪрзНржЫрзЗ ржЗрждрзНржпрж╛ржжрж┐ред
#    - ржЙржжрж╛рж╣рж░ржг:
#      (flutter clean) &
#      PID=$!
#      show_loading "Cleaning project...                                   " $PID
#
# ржХрзАржнрж╛ржмрзЗ ржЪрж╛рж▓рж╛ржмрзЗржи:
# - ржЖржЙржЯржкрзБржЯ рж▓рзБржХрж╛ржирзЛ рж╕рж╣: ржлрж╛ржЗрж▓ржЯрж┐ рж╕рзЗржн ржХрж░рзБржи (ржпрзЗржоржи, build.sh), рждрж╛рж░ржкрж░:
#   chmod +x build.sh
#   ./build.sh setup
# - ржЖржЙржЯржкрзБржЯ ржжрзЗржЦрж╛рж░ ржЬржирзНржп: ржлрж╛ржЗрж▓ржЯрж┐ рж╕рзЗржн ржХрж░рзБржи (ржпрзЗржоржи, build_with_output.sh), рждрж╛рж░ржкрж░:
#   chmod +x build_with_output.sh
#   ./build_with_output.sh setup
#//comment//