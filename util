#!/bin/bash

# Function: show_loading
# Description: Displays a loading spinner with a custom message while a process is running
# Parameters:
#   $1: Description message to display
#   $2: Process ID to monitor
function show_loading() {
  local description=$1
  local process_id=$2
  local spinner_index=0
  local braille_spinner_list='‚°ø‚£ü‚£Ø‚£∑‚£æ‚£Ω‚£ª‚¢ø'

  echo -n "$description"

  # Continue spinning while the process is running
  while ps -p "$process_id" >/dev/null; do
    printf "\b\033[35m%s\033[0m" "${braille_spinner_list:spinner_index:1}"
    spinner_index=$(( (spinner_index + 1) % ${#braille_spinner_list} ))
    sleep 0.025
  done

  # Display success or failure icon based on the process exit status
  if wait $process_id; then
    echo -e "\b\033[32m‚úì\033[0m "
  else
    echo -e "\b\033[31mêÑÇ\033[0m "
  fi
}

# Main script logic
if [ "$1" == "build" ]; then
  echo -e "Building APK...\n"
  (flutter clean >/dev/null 2>&1) &
  PID=$!
  show_loading "Cleaning project...                                   " $PID

  (flutter pub get >/dev/null 2>&1) &
  PID=$!
  show_loading "Getting dependencies...                              " $PID

  (flutter pub run build_runner build --delete-conflicting-outputs >/dev/null 2>&1) &
  PID=$!
  show_loading "Generating build files...                            " $PID

  (flutter build apk --release --obfuscate --target-platform android-arm64 --split-debug-info=./ >/dev/null 2>&1) &
  PID=$!
  show_loading "Building APK...                                      " $PID

  # Open the APK directory
  if [[ "$OSTYPE" == "darwin"* ]]; then
    open build/app/outputs/flutter-apk/
  elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    xdg-open build/app/outputs/flutter-apk/
  elif [[ "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
    start build/app/outputs/flutter-apk/
  else
    echo "Cannot open directory automatically. Please check: build/app/outputs/flutter-apk/"
  fi

elif [ "$1" == "db" ]; then
  echo -e "Executing build_runner...\n"
  (flutter pub run build_runner build --delete-conflicting-outputs >/dev/null 2>&1) &
  PID=$!
  show_loading "Running build_runner                                  " $PID

elif [ "$1" == "cleanup" ]; then
  echo -e "Cleaning up project...\n"
  (flutter clean >/dev/null 2>&1) &
  PID=$!
  show_loading "Cleaning project                                      " $PID

  (flutter pub get >/dev/null 2>&1) &
  PID=$!
  show_loading "Getting dependencies                                  " $PID

elif [ "$1" == "setup" ]; then
  echo -e "Setting up project...\n"
  (flutter pub get >/dev/null 2>&1) &
  PID=$!
  show_loading "Getting dependencies                                  " $PID

  (flutter pub run build_runner build --delete-conflicting-outputs >/dev/null 2>&1) &
  PID=$!
  show_loading "Generating build files                                " $PID

elif [ "$1" == "unused" ]; then
  echo -e "Finding unused files...\n"
  flutter analyze

elif [ "$1" == "aab" ]; then
  echo -e "Building AAB...\n"

  (flutter clean >/dev/null 2>&1) &
  PID=$!
  show_loading "Cleaning project...                                   " $PID

  (flutter pub get >/dev/null 2>&1) &
  PID=$!
  show_loading "Getting dependencies...                              " $PID

  (flutter pub run build_runner build --delete-conflicting-outputs >/dev/null 2>&1) &
  PID=$!
  show_loading "Generating build files...                            " $PID

  (flutter build appbundle --release >/dev/null 2>&1) &
  PID=$!
  show_loading "Building AAB file...                                 " $PID

  # Open the AAB directory
  if [[ "$OSTYPE" == "darwin"* ]]; then
    open build/app/outputs/bundle/release/
  elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    xdg-open build/app/outputs/bundle/release/
  elif [[ "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
    start build/app/outputs/bundle/release/
  else
    echo "Cannot open directory automatically. Please check: build/app/outputs/bundle/release/"
  fi

else
  echo "Invalid argument: $1"
  echo "Usage: ./script.sh [build|db|cleanup|setup|unused|aab]"
  exit 1
fi


#Flutter ‡¶è‡¶∞ ‡¶∏‡¶¨ ‡¶™‡ßç‡¶Ø‡¶æ‡¶ï‡ßá‡¶ú‡¶ï‡ßá forcefully update ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø