#!/bin/bash

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function: show_loading
# Description: Displays a loading spinner with a custom message while a process is running
# Parameters:
#   $1: Description message to display
#   $2: Process ID to monitor
function show_loading() {
  local description=$1
  local process_id=$2
  local spinner_index=0
  local braille_spinner_list='‚°ø‚£ü‚£Ø‚£∑‚£æ‚£Ω‚£ª‚¢ø'

  echo -n "$description"

  # Continue spinning while the process is running
  while ps -p "$process_id" >/dev/null; do
    printf "\b\033[35m%s\033[0m" "${braille_spinner_list:spinner_index:1}"
    spinner_index=$(( (spinner_index + 1) % ${#braille_spinner_list} ))
    sleep 0.025
  done

  # Display success or failure icon based on the process exit status
  if [ $? -eq 0 ]; then
    echo -e "\b\033[32m‚úì\033[0m "
  else
    echo -e "\b\033[31mêÑÇ\033[0m "
  fi
}

# Main script logic
if [ "$1" == "apk" ]; then
  echo -e "Building APK (Full Process)...\n"
  
  (flutter clean) &
  PID=$!
  show_loading "Cleaning project...                                   " $PID

  (flutter pub get) &
  PID=$!
  show_loading "Getting dependencies...                              " $PID

  (dart run build_runner build --delete-conflicting-outputs) &
  PID=$!
  show_loading "Generating build files...                            " $PID

  (flutter build apk --release --obfuscate --target-platform android-arm64 --split-debug-info=./) &
  PID=$!
  show_loading "Building APK...                                      " $PID

  echo -e "\nAPK built successfully!"
  
  # Open the APK directory
  if [[ "$OSTYPE" == "darwin"* ]]; then
    open build/app/outputs/flutter-apk/
  elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    xdg-open build/app/outputs/flutter-apk/
  elif [[ "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
    start build/app/outputs/flutter-apk/
  else
    echo "Cannot open directory automatically. Please check: build/app/outputs/flutter-apk/"
  fi

elif [ "$1" == "aab" ]; then
  echo -e "Building AAB...\n"
  
  (flutter clean) &
  PID=$!
  show_loading "Cleaning project...                                   " $PID

  (flutter pub get) &
  PID=$!
  show_loading "Getting dependencies...                              " $PID

  (dart run build_runner build --delete-conflicting-outputs) &
  PID=$!
  show_loading "Generating build files...                            " $PID

  (flutter build appbundle --release --obfuscate --split-debug-info=./) &
  PID=$!
  show_loading "Building AAB...                                      " $PID
  
  echo -e "\nAAB built successfully!"
  
  # Open the directory containing the AAB
  if [[ "$OSTYPE" == "darwin"* ]]; then
    open build/app/outputs/bundle/release/
  elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    xdg-open build/app/outputs/bundle/release/
  elif [[ "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
    start build/app/outputs/bundle/release/
  else
    echo "Cannot open directory automatically. Please check: build/app/outputs/bundle/release/"
  fi

elif [ "$1" == "lang" ]; then
  # Run flutter gen-l10n to generate localization files
  (flutter gen-l10n) &
  PID=$!
  show_loading "Generating localizations                              " $PID
  
  echo -e "\n\033[32m‚úì  Localizations generated successfully.  \033[0m"

elif [ "$1" == "db" ]; then
  echo -e "Executing build_runner...  \n"
  # Run build_runner to generate Dart code
  (dart run build_runner build --delete-conflicting-outputs) &
  PID=$!
  show_loading "Running build_runner     " $PID

elif [ "$1" == "setup" ]; then
  echo -e "Performing full setup...  \n"

  (flutter clean) &
  PID=$!
  show_loading "Cleaning project...                                  " $PID

  (flutter pub upgrade) &
  PID=$!
  show_loading "Upgrading dependencies...                            " $PID

  (dart run build_runner build --delete-conflicting-outputs) &
  PID=$!
  show_loading "Running build_runner...                              " $PID

  (flutter gen-l10n) &
  PID=$!
  show_loading "Generating localizations...                          " $PID

  (flutter pub upgrade) &
  PID=$!
  show_loading "Refreshing dependencies...                           " $PID

  (flutter analyze) &
  PID=$!
  show_loading "Analyzing code...                                    " $PID

  (dart format .) &
  PID=$!
  show_loading "Formatting code...                                   " $PID

  echo -e "\n\033[32m‚úì  Full setup completed successfully.  \033[0m"

elif [ "$1" == "cache-repair" ]; then
  echo -e "Repairing pub cache...\n"
  
  (flutter pub cache repair) &
  PID=$!
  show_loading "Repairing pub cache...                               " $PID
  
  echo -e "\n\033[32m‚úì  Pub cache repaired successfully.  \033[0m"

else
  echo -e "Usage: $0 [command]"
  echo -e "\nAvailable commands:"
  echo -e "  apk          Build release APK (Full Process)"
  echo -e "  aab          Build release AAB"
  echo -e "  lang         Generate localization files"
  echo -e "  db           Run build_runner"
  echo -e "  setup        Perform full project setup"
  echo -e "  cache-repair Repair pub cache"
  exit 1
fi